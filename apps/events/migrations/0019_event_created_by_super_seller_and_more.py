# Generated by Django 5.2.1 on 2025-10-29 08:31

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0018_merge_20251029_0930'),
        ('organizations', '0005_historicalorganization_organization_type_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='created_by_super_seller',
            field=models.ForeignKey(blank=True, help_text='Super-vendeur qui a créé cet événement éphémère (si applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ephemeral_events', to='organizations.organization', verbose_name='Créé par super-vendeur'),
        ),
        migrations.AddField(
            model_name='event',
            name='ephemeral_access_code',
            field=models.CharField(blank=True, db_index=True, help_text="Code unique pour accéder à l'événement éphémère", max_length=50, verbose_name="Code d'accès éphémère"),
        ),
        migrations.AddField(
            model_name='event',
            name='is_ephemeral',
            field=models.BooleanField(db_index=True, default=False, help_text="Si coché, l'événement ne sera pas listé publiquement", verbose_name='Événement éphémère'),
        ),
        migrations.AddField(
            model_name='historicalevent',
            name='created_by_super_seller',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Super-vendeur qui a créé cet événement éphémère (si applicable)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='organizations.organization', verbose_name='Créé par super-vendeur'),
        ),
        migrations.AddField(
            model_name='historicalevent',
            name='ephemeral_access_code',
            field=models.CharField(blank=True, db_index=True, help_text="Code unique pour accéder à l'événement éphémère", max_length=50, verbose_name="Code d'accès éphémère"),
        ),
        migrations.AddField(
            model_name='historicalevent',
            name='is_ephemeral',
            field=models.BooleanField(db_index=True, default=False, help_text="Si coché, l'événement ne sera pas listé publiquement", verbose_name='Événement éphémère'),
        ),
        migrations.AlterField(
            model_name='eventhighlighting',
            name='end_date',
            field=models.DateField(blank=True, default=datetime.date(2025, 11, 5), verbose_name='Date de fin de validité'),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='expiry_date',
            field=models.DateTimeField(default=datetime.datetime(2025, 10, 29, 15, 31, 3, 746124), verbose_name='Date de fin de validité'),
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name="Date d' ajout")),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('active', models.BooleanField(default=True, verbose_name="Désigne si l' instance est active")),
                ('status', models.CharField(choices=[('INVITED', 'Invité'), ('ACTIVE', 'Actif'), ('SUSPENDED', 'Suspendu'), ('INACTIVE', 'Inactif')], db_index=True, default='INVITED', max_length=20, verbose_name='Statut')),
                ('kyc_status', models.CharField(choices=[('PENDING', 'En attente'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté'), ('NOT_REQUIRED', 'Non requis')], db_index=True, default='NOT_REQUIRED', max_length=20, verbose_name='Statut KYC')),
                ('invited_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'invitation")),
                ('activated_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'activation")),
                ('suspended_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suspension')),
                ('suspension_reason', models.TextField(blank=True, verbose_name='Raison de la suspension')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Numéro de téléphone')),
                ('whatsapp_number', models.CharField(blank=True, help_text='Pour les notifications et communications', max_length=20, verbose_name='Numéro WhatsApp')),
                ('mobile_money_provider', models.CharField(blank=True, help_text='Ex: MTN, Moov, Orange, Celtiis, etc.', max_length=50, verbose_name='Opérateur Mobile Money')),
                ('mobile_money_number', models.CharField(blank=True, max_length=20, verbose_name='Numéro Mobile Money pour les paiements')),
                ('mobile_money_account_name', models.CharField(blank=True, max_length=200, verbose_name='Nom du compte Mobile Money')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Pourcentage de commission sur les ventes', max_digits=5, verbose_name='Taux de commission (%)')),
                ('sales_target', models.IntegerField(default=0, help_text='Nombre de tickets à vendre (objectif mensuel)', verbose_name='Objectif de ventes')),
                ('assigned_zone', models.CharField(blank=True, help_text="Zone géographique ou secteur d'activité", max_length=200, verbose_name='Zone assignée')),
                ('notes', models.TextField(blank=True, help_text='Notes internes sur le vendeur', verbose_name='Notes')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Informations supplémentaires flexibles', verbose_name='Métadonnées')),
                ('organization_member', models.OneToOneField(blank=True, help_text="Référence au membre d'organisation (rôle SELLER)", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seller_profile', to='organizations.organizationmembership', verbose_name="Membre d'organisation")),
                ('super_seller', models.ForeignKey(help_text='Organisation super-vendeur qui gère ce vendeur', on_delete=django.db.models.deletion.CASCADE, related_name='sellers', to='organizations.organization', verbose_name='Super-Vendeur')),
                ('user', models.ForeignKey(help_text="L'utilisateur associé à ce vendeur", on_delete=django.db.models.deletion.CASCADE, related_name='seller_profiles', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Vendeur',
                'verbose_name_plural': 'Vendeurs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SuperSellerProfile',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name="Date d' ajout")),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('active', models.BooleanField(default=True, verbose_name="Désigne si l' instance est active")),
                ('kyc_status', models.CharField(choices=[('PENDING', 'En attente'), ('VERIFIED', 'Vérifié'), ('REJECTED', 'Rejeté')], db_index=True, default='PENDING', max_length=20, verbose_name='Statut KYC')),
                ('kyc_verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de vérification KYC')),
                ('kyc_rejection_reason', models.TextField(blank=True, verbose_name='Raison du rejet KYC')),
                ('identity_document', models.FileField(blank=True, null=True, upload_to='kyc/super_sellers/identity/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name="Document d'identité")),
                ('business_registration', models.FileField(blank=True, null=True, upload_to='kyc/super_sellers/business/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Enregistrement commercial')),
                ('proof_of_address', models.FileField(blank=True, null=True, upload_to='kyc/super_sellers/address/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Justificatif de domicile')),
                ('additional_documents', models.JSONField(blank=True, default=list, help_text="Liste d'URLs ou chemins vers documents supplémentaires", verbose_name='Documents additionnels')),
                ('mobile_money_provider', models.CharField(blank=True, help_text='Ex: MTN, Moov, Orange, Celtiis, etc.', max_length=50, verbose_name='Opérateur Mobile Money')),
                ('mobile_money_number', models.CharField(blank=True, max_length=20, verbose_name='Numéro Mobile Money')),
                ('mobile_money_account_name', models.CharField(blank=True, max_length=200, verbose_name='Nom du compte Mobile Money')),
                ('bank_name', models.CharField(blank=True, max_length=200, verbose_name='Nom de la banque')),
                ('bank_account_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro de compte bancaire')),
                ('bank_account_name', models.CharField(blank=True, max_length=200, verbose_name='Nom du titulaire du compte')),
                ('bank_swift_code', models.CharField(blank=True, help_text='Pour les virements internationaux', max_length=11, verbose_name='Code SWIFT/BIC')),
                ('bank_iban', models.CharField(blank=True, help_text='Si applicable', max_length=34, verbose_name='IBAN')),
                ('preferred_payment_method', models.CharField(choices=[('MOBILE_MONEY', 'Mobile Money'), ('BANK_TRANSFER', 'Virement Bancaire')], default='MOBILE_MONEY', max_length=20, verbose_name='Méthode de paiement préférée')),
                ('notes', models.TextField(blank=True, help_text="Notes pour l'équipe administrative", verbose_name='Notes internes')),
                ('kyc_verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_super_sellers', to=settings.AUTH_USER_MODEL, verbose_name='Vérifié par')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='super_seller_profile', to='organizations.organization', verbose_name='Organisation Super-Vendeur')),
            ],
            options={
                'verbose_name': 'Profil Super-Vendeur',
                'verbose_name_plural': 'Profils Super-Vendeurs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TicketStock',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name="Date d' ajout")),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('active', models.BooleanField(default=True, verbose_name="Désigne si l' instance est active")),
                ('total_allocated', models.IntegerField(default=0, help_text='Nombre total de tickets attribués au vendeur', verbose_name='Quantité totale allouée')),
                ('total_sold', models.IntegerField(default=0, help_text='Nombre de tickets déjà vendus', verbose_name='Quantité vendue')),
                ('authorized_sale_price', models.DecimalField(decimal_places=2, help_text='Prix auquel le vendeur peut vendre le ticket', max_digits=9, verbose_name='Prix de vente autorisé')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Commission du vendeur sur chaque vente', max_digits=5, verbose_name='Taux de commission (%)')),
                ('allocated_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'attribution")),
                ('last_sale_at', models.DateTimeField(blank=True, help_text='Date et heure de la dernière vente', null=True, verbose_name='Dernière vente')),
                ('notes', models.TextField(blank=True, help_text='Notes sur ce stock', verbose_name='Notes')),
                ('event', models.ForeignKey(help_text='Événement concerné', on_delete=django.db.models.deletion.CASCADE, related_name='seller_stocks', to='events.event', verbose_name='Événement')),
                ('seller', models.ForeignKey(help_text='Vendeur possédant ce stock', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_stocks', to='events.seller', verbose_name='Vendeur')),
                ('ticket', models.ForeignKey(help_text='Catégorie de ticket', on_delete=django.db.models.deletion.CASCADE, related_name='seller_stocks', to='events.ticket', verbose_name='Type de ticket')),
            ],
            options={
                'verbose_name': 'Stock de Tickets',
                'verbose_name_plural': 'Stocks de Tickets',
                'ordering': ['-allocated_at'],
            },
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name="Date d' ajout")),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('active', models.BooleanField(default=True, verbose_name="Désigne si l' instance est active")),
                ('transaction_type', models.CharField(choices=[('ALLOCATION', 'Attribution de stock'), ('SALE', 'Vente'), ('RETURN', 'Retour de stock'), ('ADJUSTMENT', 'Ajustement')], db_index=True, max_length=20, verbose_name='Type de transaction')),
                ('quantity', models.IntegerField(help_text='Nombre de tickets concernés (positif ou négatif)', verbose_name='Quantité')),
                ('quantity_before', models.IntegerField(help_text='Quantité disponible avant la transaction', verbose_name='Quantité avant')),
                ('quantity_after', models.IntegerField(help_text='Quantité disponible après la transaction', verbose_name='Quantité après')),
                ('sale_price', models.DecimalField(blank=True, decimal_places=2, help_text='Prix unitaire de vente (si transaction de vente)', max_digits=9, null=True, verbose_name='Prix de vente')),
                ('commission_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Commission gagnée (si transaction de vente)', max_digits=9, null=True, verbose_name='Montant de commission')),
                ('notes', models.TextField(blank=True, help_text='Détails ou raison de la transaction', verbose_name='Notes')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Informations supplémentaires', verbose_name='Métadonnées')),
                ('initiated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a initié cette transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiated_stock_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Initié par')),
                ('related_order', models.ForeignKey(blank=True, help_text='Commande liée (si transaction de vente)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_transactions', to='events.order', verbose_name='Commande associée')),
                ('ticket_stock', models.ForeignKey(help_text='Stock concerné par cette transaction', on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='events.ticketstock', verbose_name='Stock de tickets')),
            ],
            options={
                'verbose_name': 'Transaction de Stock',
                'verbose_name_plural': 'Transactions de Stock',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='seller',
            index=models.Index(fields=['super_seller', 'status'], name='events_sell_super_s_47b8fc_idx'),
        ),
        migrations.AddIndex(
            model_name='seller',
            index=models.Index(fields=['status', '-timestamp'], name='events_sell_status_5d9fb4_idx'),
        ),
        migrations.AddIndex(
            model_name='seller',
            index=models.Index(fields=['user', 'super_seller'], name='events_sell_user_id_f0f9ee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='seller',
            unique_together={('user', 'super_seller')},
        ),
        migrations.AddIndex(
            model_name='supersellerprofile',
            index=models.Index(fields=['kyc_status', '-timestamp'], name='events_supe_kyc_sta_a7c1aa_idx'),
        ),
        migrations.AddIndex(
            model_name='supersellerprofile',
            index=models.Index(fields=['organization', 'kyc_status'], name='events_supe_organiz_8d7eac_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketstock',
            index=models.Index(fields=['seller', 'event'], name='events_tick_seller__9fd6ab_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketstock',
            index=models.Index(fields=['event', '-allocated_at'], name='events_tick_event_i_6f2adb_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketstock',
            index=models.Index(fields=['seller', '-allocated_at'], name='events_tick_seller__61c9ef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ticketstock',
            unique_together={('seller', 'event', 'ticket')},
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['ticket_stock', '-timestamp'], name='events_stoc_ticket__8b4e7d_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['transaction_type', '-timestamp'], name='events_stoc_transac_955ba2_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['initiated_by', '-timestamp'], name='events_stoc_initiat_b6fc42_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['-timestamp'], name='events_stoc_timesta_e10ae7_idx'),
        ),
    ]
